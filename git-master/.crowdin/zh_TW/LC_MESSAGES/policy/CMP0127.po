msgid ""
msgstr ""
"Project-Id-Version: 40c7da21a45a5aec5bfee08f6c874e33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-17 07:01+0000\n"
"PO-Revision-Date: 2024-11-05 06:06\n"
"Last-Translator: \n"
"Language-Team: Chinese Traditional\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: 40c7da21a45a5aec5bfee08f6c874e33\n"
"X-Crowdin-Project-ID: 8\n"
"X-Crowdin-Language: zh-TW\n"
"X-Crowdin-File: /git-master/locale/pot/LC_MESSAGES/policy/CMP0127.pot\n"
"X-Crowdin-File-ID: 12030\n"

#: ../../../policy/CMP0127.rst:2
msgid "CMP0127"
msgstr ""

#: ../../../policy/CMP0127.rst:6
msgid ":command:`cmake_dependent_option` supports full :ref:`Condition Syntax`."
msgstr ""

#: ../../../policy/CMP0127.rst:8
msgid "The ``<depends>`` parameter accepts a :ref:`semicolon-separated list <CMake Language Lists>` of conditions.  CMake 3.21 and lower evaluates each ``condition`` as ``if(${condition})``, which does not properly handle conditions with nested paren groups.  CMake 3.22 and above instead prefer to evaluate each ``condition`` as ``if(<condition>)``, where ``<condition>`` is re-parsed as if literally written in a call to :command:`if`.  This allows expressions like::"
msgstr ""

#: ../../../policy/CMP0127.rst:16
msgid "\"A AND (B OR C)\""
msgstr ""

#: ../../../policy/CMP0127.rst:18
msgid "but requires expressions like::"
msgstr ""

#: ../../../policy/CMP0127.rst:20
msgid "\"FOO MATCHES (UPPER|lower)\""
msgstr ""

#: ../../../policy/CMP0127.rst:22
msgid "to be re-written as::"
msgstr ""

#: ../../../policy/CMP0127.rst:24
msgid "\"FOO MATCHES \\\"(UPPER|lower)\\\"\""
msgstr ""

#: ../../../policy/CMP0127.rst:26
msgid "Policy ``CMP0127`` provides compatibility for projects that have not been updated to expect the new behavior."
msgstr ""

#: ../../../policy/STANDARD_ADVICE.txt:1
msgid "This policy was introduced in CMake version |INTRODUCED_IN_CMAKE_VERSION|. It may be set by :command:`cmake_policy` or :command:`cmake_minimum_required`. If it is not set, CMake |WARNS_OR_DOES_NOT_WARN|, and uses ``OLD`` behavior."
msgstr ""

#: ../../../policy/DEPRECATED.txt:2
msgid "The ``OLD`` behavior of a policy is :manual:`deprecated by definition <cmake-policies(7)>` and may be removed in a future version of CMake."
msgstr ""

