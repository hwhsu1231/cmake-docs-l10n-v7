msgid ""
msgstr ""
"Project-Id-Version: 40c7da21a45a5aec5bfee08f6c874e33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-17 07:01+0000\n"
"PO-Revision-Date: 2024-07-21 04:06\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"Language: ru_RU\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: 40c7da21a45a5aec5bfee08f6c874e33\n"
"X-Crowdin-Project-ID: 8\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /git-master/locale/pot/LC_MESSAGES/prop_test/WILL_FAIL.pot\n"
"X-Crowdin-File-ID: 9972\n"

#: ../../../prop_test/WILL_FAIL.rst:2
msgid "WILL_FAIL"
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:4
msgid "If ``true``, inverts the pass / fail test criteria. Tests for which ``WILL_FAIL`` is ``true`` fail with return code 0 and pass with non-zero return code. Tests that exceed the timeout specified by :prop_test:`TIMEOUT` still fail regardless of ``WILL_FAIL``. System-level test failures including segmentation faults, signal abort, or heap errors may fail the test even if ``WILL_FAIL`` is true."
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:11
msgid "Example of a test that would ordinarily pass, but fails because ``WILL_FAIL`` is ``true``:"
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:14
msgid "add_test(NAME failed COMMAND ${CMAKE_COMMAND} -E true)\n"
"set_property(TEST failed PROPERTY WILL_FAIL true)"
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:19
msgid "To run a test that may have a system-level failure, but still pass if ``WILL_FAIL`` is set, use a CMake command to wrap the executable run. Note that this will prevent automatic handling of the :prop_tgt:`CROSSCOMPILING_EMULATOR` and :prop_tgt:`TEST_LAUNCHER` target property."
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:25
msgid "add_executable(main main.c)\n\n"
"add_test(NAME sigabrt COMMAND ${CMAKE_COMMAND} -E env $<TARGET_FILE:main>)\n\n"
"set_property(TEST sigabrt PROPERTY WILL_FAIL TRUE)"
msgstr ""

#: ../../../prop_test/WILL_FAIL.rst:33
msgid "#include <signal.h>\n\n"
"int main(void){ raise(SIGABRT); return 0; }"
msgstr ""

