# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: ci-deploy-po-version

on:
  # Triggers the workflow based on a schedule.
  schedule:
    - cron: '0 8 * * 1'   # CRON_dev
    - cron: '0 8 1 * *'   # CRON_v3
  # Triggers the workflow manually through the GitHub UI.
  workflow_dispatch:
    inputs:
      TYPE:
        description: 'TYPE input'
        required: true
        type: choice
        default: 'matrix'
        options:
          - 'matrix'
          - 'single'
      VERSION:
        description: 'VERSION input (for single type)'
        required: true
        type: string
        default: 'git-master'
      VERSION_GROUP:
        description: 'VERSION_GROUP input (for matrix type)'
        required: true
        type: choice
        default: 'all'
        options:
          - 'all'
          - 'dev'
          - 'v3'

env:
  CRON_dev: '0 8 * * 1'
  CRON_v3:  '0 8 1 * *'

jobs:
  precondition:
    if: ${{ ( ( github.event_name == 'schedule' ) ||
              ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
              ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'single' ) ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Print Contexts/Inputs/Variables/Secrets
        shell: bash
        run: |
          echo "[Contexts]"
          echo "github.job = ${{ github.job }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.ref_name = ${{ github.ref_name }}"
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.event.schedule = ${{ github.event.schedule }}"
          echo "[Inputs]"
          echo "inputs.TYPE = ${{ inputs.TYPE }}"
          echo "inputs.VERSION = ${{ inputs.VERSION }}"
          echo "inputs.VERSION_GROUP = ${{ inputs.VERSION_GROUP }}"
          echo "[Variables]"
          echo "vars.ACTOR_NAME = ${{ vars.ACTOR_NAME }}"
          echo "vars.ACTOR_EMAIL = ${{ vars.ACTOR_EMAIL }}"
          echo "[Secrets]"
          echo "secrets.ACTOR_GITHUB_TOKEN = ${{ secrets.ACTOR_GITHUB_TOKEN }}"
      - name: Check Variables
        shell: bash
        run: |
          VARIABLES_EXIST=true
          if [[ -z "${{ vars.ACTOR_NAME }}" ]]; then
            echo "vars.ACTOR_NAME is missing."
            VARIABLES_EXIST=false
          fi
          if [[ -z "${{ vars.ACTOR_EMAIL }}" ]]; then
            echo "vars.ACTOR_EMAIL is missing."
            VARIABLES_EXIST=false
          fi
          if [[ "${VARIABLES_EXIST}" == "false" ]]; then
            echo "Error: Some variables are missing." >&2
            exit 1
          fi
      - name: Check Secrets
        shell: bash
        run: |
          SECRETS_EXIST=true
          if [[ -z "${{ secrets.ACTOR_GITHUB_TOKEN }}" ]]; then
            echo "secrets.ACTOR_GITHUB_TOKEN is missing."
            SECRETS_EXIST=false
          fi
          if [[ "${SECRETS_EXIST}" == "false" ]]; then
            echo "Error: Some secrets are missing." >&2
            exit 1
          fi

  get-matrix:
    if: ${{ ( ( github.event_name == 'schedule' ) ||
              ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
              ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'single' ) ) }}
    runs-on: ubuntu-latest
    outputs:
      VERSION_NUM: ${{ steps.gvlv.outputs.VERSION_NUM }}
      VERSION_LIST: ${{ steps.gvlv.outputs.VERSION_LIST }}
    steps:
      - name: Checkout to '${{ github.ref }}'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Get Outputs from Schedule
        if: ${{ github.event_name == 'schedule' }}
        id: gos
        uses: hwhsu1231/ci-sphinx/.github/actions/get-outputs-from-schedule@main
        with:
          schedule: ${{ github.event.schedule }}
      - name: Get the Version List from versions.json
        id: gvlv
        uses: hwhsu1231/ci-sphinx/.github/actions/get-version-list-from-versions-file@main
        with:
          type: ${{ inputs.TYPE || steps.gos.outputs.TYPE }}
          version: ${{ inputs.VERSION || steps.gos.outputs.VERSION }}
          version-group: ${{ inputs.VERSION_GROUP || steps.gos.outputs.VERSION_GROUP }}
          version-filter: 'all'
      # For Testing
      - name: Get the All-In-One List from versions.json
        id: gaio
        uses: hwhsu1231/ci-sphinx/.github/actions/get-all-in-one-list-from-versions-file@main
        with:
          type: ${{ inputs.TYPE || steps.gos.outputs.TYPE }}
          version: ${{ inputs.VERSION || steps.gos.outputs.VERSION }}
          version-group: ${{ inputs.VERSION_GROUP || steps.gos.outputs.VERSION_GROUP }}
          version-filter: 'all'
      - name: Get the Language List from languages.json
        id: glll
        uses: hwhsu1231/ci-sphinx/.github/actions/get-language-list-from-languages-file@main
        with:
          language: 'all'
          all-in-one: 'false'
      - name: Get the MATRIX from the JSON Lists
        id: gm
        uses: hwhsu1231/ci-sphinx/.github/actions/get-matrix-from-json-lists@main
        with:
          matrix-type: 'version-language'
          version-list: ${{ steps.gvlv.outputs.VERSION_LIST }}
          allinone-list: ${{ steps.gaio.outputs.ALLINONE_LIST }}
          language-list: ${{ steps.glll.outputs.LANGUAGE_LIST }}
        # shell: bash
        # run: |
        #   # Get the JSON list from Inputs.
        #   VERSION_LIST='${{ steps.gvlv.outputs.VERSION_LIST }}'
        #   ALLINONE_LIST='${{ steps.gaio.outputs.ALLINONE_LIST }}'
        #   LANGUAGE_LIST='${{ steps.glll.outputs.LANGUAGE_LIST }}'

        #   # Convert the JSON list to the Bash array.
        #   VERSION_ARRAY=($(echo "$VERSION_LIST" | jq -r '.[]'))
        #   ALLINONE_ARRAY=($(echo "$ALLINONE_LIST" | jq -r '.[]'))
        #   LANGUAGE_ARRAY=($(echo "$LANGUAGE_LIST" | jq -r '.[]'))

        #   # Initialize the Matrix
        #   MATRIX_ARRAY=()

        #   # Generate a full matrix with VERSION and LANGUAGE combinations
        #   for INDEX in "${!VERSION_ARRAY[@]}"; do
        #     VERSION="${VERSION_ARRAY[${INDEX}]}"
        #     ALLINONE="${ALLINONE_ARRAY[${INDEX}]}"
        #     if [[ "${ALLINONE}" == "true" ]]; then
        #       MATRIX_ARRAY+=("{\"VERSION\":\"${VERSION}\",\"LANGUAGE\":\"all\"}")
        #     else
        #       for LANGUAGE in "${LANGUAGE_ARRAY[@]}"; do
        #         MATRIX_ARRAY+=("{\"VERSION\":\"${VERSION}\",\"LANGUAGE\":\"${LANGUAGE}\"}")
        #       done
        #     fi
        #   done

        #   echo "MATRIX_ARRAY:"
        #   echo "${MATRIX_ARRAY[@]}"

        #   # Convert the matrix to JSON format.
        #   MATRIX=$(printf '%s\n' "${MATRIX_ARRAY[@]}" | jq -c -s '.')

        #   # Output and Print the Matrix.
        #   echo "MATRIX=${MATRIX}" >> ${GITHUB_OUTPUT}
        #   echo "MATRIX:"
        #   echo "${MATRIX}" | jq .

  # caller:
  #   needs: [ 'precondition', 'get-matrix' ]
  #   if: ${{ ( ( github.event_name == 'schedule' ) ||
  #             ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'matrix' ) ||
  #             ( github.event_name == 'workflow_dispatch' && inputs.TYPE == 'single' ) ) &&
  #           ( needs.get-matrix.outputs.VERSION_NUM != '0' ) }}
  #   strategy:
  #     matrix:
  #       VERSION: ${{ fromJSON(needs.get-matrix.outputs.VERSION_LIST) }}
  #     fail-fast: false
  #   concurrency:
  #     group: ${{ github.workflow }}-${{ matrix.VERSION }}
  #     cancel-in-progress: true
  #   uses: hwhsu1231/ci-sphinx/.github/workflows/use-deploy-po-version.yml@main
  #   with:
  #     RUNNER: 'ubuntu-latest'
  #     CHECKOUT: ${{ github.ref }}
  #     VERSION: ${{ matrix.VERSION }}
  #     CALLER_JOB: 'caller (${{ matrix.VERSION }})'
  #     ENABLE_JOB: true
  #     ACTOR_NAME: ${{ vars.ACTOR_NAME }}
  #     ACTOR_EMAIL: ${{ vars.ACTOR_EMAIL }}
  #   secrets:
  #     ACTOR_GITHUB_TOKEN: ${{ secrets.ACTOR_GITHUB_TOKEN }}
