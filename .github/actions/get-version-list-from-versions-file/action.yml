# Distributed under the OSI-approved BSD 3-Clause License.
# See accompanying file LICENSE.txt for details.

name: get-version-list-from-versions-file

description: Get the Version List from versions.json

inputs:
  type:
    required: true    # [required]
    description: xxx
  version:
    required: true    # [required]
    description: xxx
  version-group:
    required: true    # [required]
    description: xxx
  version-filter:
    required: true    # [required]
    description: >
      Possible values are: 'all', 'gettext', and 'tmscli'.
  versions-file:
    required: false
    description: xxx
    default: 'versions.json'
  working-directory:
    required: false
    description: xxx
    default: ${{ github.workspace }}

outputs:
  VERSION_NUM:
    value: ${{ steps.gvlv.outputs.VERSION_NUM }}
    description: xxx
  VERSION_LIST:
    value: ${{ steps.gvlv.outputs.VERSION_LIST }}
    description: xxx

runs:
  using: composite
  steps:
    - name: Get the Version List from versions.json
      id: gvlv
      shell: bash
      run: |
        TYPE="${{ inputs.type }}"
        VERSION="${{ inputs.version }}"
        VERSION_GROUP="${{ inputs.version-group }}"
        VERSION_FILTER="${{ inputs.version-filter }}"
        VERSIONS_FILE="${{ inputs.versions-file }}"
        WORKING_DIRECTORY=$(echo "${{ inputs.working-directory }}" | sed 's#\\#/#g' | sed 's#^\([A-Za-z]\):#/\L\1#')

        cd ${WORKING_DIRECTORY}

        if [[ "${TYPE}" == "matrix" ]]; then
          if [[ ${VERSION_GROUP} == "all" ]]; then
            VERSION_GROUP_FILTER=""
          else
            VERSION_GROUP_FILTER="\"${VERSION_GROUP}\""
          fi
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(.VERSION)] | add"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM != \"\") | .VERSION)] | add"
          elif [[ "${VERSION_FILTER}" == "tmscli" ]]; then
            JQ_FILTER="[.[${VERSION_GROUP_FILTER}] | map(select(.VERSION_COMPENDIUM == \"\") | .VERSION)] | add"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          VERSION_LIST=$(jq -c "${JQ_FILTER}" "${JQ_FILE}")
        elif [[ "${TYPE}" == "single" ]]; then
          if [[ "${VERSION_FILTER}" == "all" ]]; then
            JQ_FILTER=".[] | .[] | .VERSION"
          elif [[ "${VERSION_FILTER}" == "gettext" ]]; then
            JQ_FILTER=".[] | .[] | select(.VERSION_COMPENDIUM != \"\") | .VERSION"
          elif [[ "${VERSION_FILTER}" == "tmscli" ]]; then
            JQ_FILTER=".[] | .[] | select(.VERSION_COMPENDIUM == \"\") | .VERSION"
          else
            echo "Error: Invalid VERSION_FILTER value. (${VERSION_FILTER})" >&2
            exit 1
          fi
          JQ_FILE="${VERSIONS_FILE}"
          VERSION_LINES=($(jq -r "${JQ_FILTER}" "${JQ_FILE}" | tr -d '\r'))
          FOUND_VERSION=false
          for VERSION_LINE in ${VERSION_LINES[@]}; do
            if [[ "${VERSION_LINE}" == "${VERSION}" ]]; then
              FOUND_VERSION=true
              VERSION_LIST="[ \"${VERSION}\" ]"
              break
            fi
          done
          if [[ "${FOUND_VERSION}" == "true" ]]; then
            echo "Version '${VERSION}' is found in the list."
          else
            echo "Error: Version '${VERSION}' is NOT found in the list." >&2
            exit 1
          fi
        else
          echo "Error: Invalid TYPE value. (${TYPE})" >&2
          exit 1
        fi
        VERSION_NUM=$(jq "length" <<< "${VERSION_LIST}")

        echo "VERSION_NUM=${VERSION_NUM}" >> ${GITHUB_OUTPUT}
        echo "VERSION_NUM:"
        echo "${VERSION_NUM}"

        echo "VERSION_LIST=${VERSION_LIST}" >> ${GITHUB_OUTPUT}
        echo "VERSION_LIST:"
        echo "${VERSION_LIST}" | jq "."
