msgid ""
msgstr ""
"Project-Id-Version: 40c7da21a45a5aec5bfee08f6c874e33\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-18 02:39+0000\n"
"PO-Revision-Date: 2024-08-15 00:21\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: 40c7da21a45a5aec5bfee08f6c874e33\n"
"X-Crowdin-Project-ID: 8\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /v3.13/locale/pot/LC_MESSAGES/command/define_property.pot\n"
"X-Crowdin-File-ID: 15673\n"
"Language: ru_RU\n"

#: ../../../command/define_property.rst:2
msgid "define_property"
msgstr ""

#: ../../../command/define_property.rst:4
msgid "Define and document custom properties."
msgstr ""

#: ../../../command/define_property.rst:8
msgid "define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE |\n"
"                 TEST | VARIABLE | CACHED_VARIABLE>\n"
"                 PROPERTY <name> [INHERITED]\n"
"                 BRIEF_DOCS <brief-doc> [docs...]\n"
"                 FULL_DOCS <full-doc> [docs...])"
msgstr ""

#: ../../../command/define_property.rst:14
msgid "Define one property in a scope for use with the :command:`set_property` and :command:`get_property` commands.  This is primarily useful to associate documentation with property names that may be retrieved with the :command:`get_property` command. The first argument determines the kind of scope in which the property should be used.  It must be one of the following:"
msgstr ""

#: ../../../command/define_property.rst:23
msgid "GLOBAL    = associated with the global namespace\n"
"DIRECTORY = associated with one directory\n"
"TARGET    = associated with one target\n"
"SOURCE    = associated with one source file\n"
"TEST      = associated with a test named with add_test\n"
"VARIABLE  = documents a CMake language variable\n"
"CACHED_VARIABLE = documents a CMake cache variable"
msgstr ""

#: ../../../command/define_property.rst:31
msgid "Note that unlike :command:`set_property` and :command:`get_property` no actual scope needs to be given; only the kind of scope is important."
msgstr ""

#: ../../../command/define_property.rst:34
msgid "The required ``PROPERTY`` option is immediately followed by the name of the property being defined."
msgstr ""

#: ../../../command/define_property.rst:37
msgid "If the ``INHERITED`` option is given, then the :command:`get_property` command will chain up to the next higher scope when the requested property is not set in the scope given to the command."
msgstr ""

#: ../../../command/define_property.rst:41
msgid "``DIRECTORY`` scope chains to its parent directory's scope, continuing the walk up parent directories until a directory has the property set or there are no more parents.  If still not found at the top level directory, it chains to the ``GLOBAL`` scope."
msgstr ""

#: ../../../command/define_property.rst:45
msgid "``TARGET``, ``SOURCE`` and ``TEST`` properties chain to ``DIRECTORY`` scope, including further chaining up the directories, etc. as needed."
msgstr ""

#: ../../../command/define_property.rst:48
msgid "Note that this scope chaining behavior only applies to calls to :command:`get_property`, :command:`get_directory_property`, :command:`get_target_property`, :command:`get_source_file_property` and :command:`get_test_property`.  There is no inheriting behavior when *setting* properties, so using ``APPEND`` or ``APPEND_STRING`` with the :command:`set_property` command will not consider inherited values when working out the contents to append to."
msgstr ""

#: ../../../command/define_property.rst:56
msgid "The ``BRIEF_DOCS`` and ``FULL_DOCS`` options are followed by strings to be associated with the property as its brief and full documentation. Corresponding options to the :command:`get_property` command will retrieve the documentation."
msgstr ""

