(function() {
  'use strict';

  const url_re = /@LANGURL_RE@\/(master|latest|(\d\.\d+))\/(.*)/;
  const all_versions = {
    'master': 'git-master',
    'latest': 'latest release',
    '3.30': '3.30',
    '3.29': '3.29',
    '3.28': '3.28',
    '3.27': '3.27',
    '3.26': '3.26',
    '3.25': '3.25',
    '3.24': '3.24',
    '3.23': '3.23',
    '3.22': '3.22',
    '3.21': '3.21',
    '3.20': '3.20',
    '3.19': '3.19',
    '3.18': '3.18',
    '3.17': '3.17',
    '3.16': '3.16',
    '3.15': '3.15',
    '3.14': '3.14',
    '3.13': '3.13',
    '3.12': '3.12',
    '3.11': '3.11',
    '3.10': '3.10',
    '3.9': '3.9',
    '3.8': '3.8',
    '3.7': '3.7',
    '3.6': '3.6',
    '3.5': '3.5',
    '3.4': '3.4',
    '3.3': '3.3',
    '3.2': '3.2',
    '3.1': '3.1',
    '3.0': '3.0',
  };

  function build_select(current_version, current_release) {
    let buf = ['<select>'];

    Object.entries(all_versions).forEach(([version, title]) => {
      buf.push('<option value="' + version + '"');
      if (version === current_version) {
        buf.push(' selected="selected">');
        if (version[0] == 'v') {
          buf.push(current_release);
        } else {
          buf.push(title + ' (' + current_release + ')');
        }
      } else {
        buf.push('>' + title);
      }
      buf.push('</option>');
    });

    buf.push('</select>');
    return buf.join('');
  }

  function patch_url(url, new_version) {
    var match = url_re.exec(url);
    if (match) {
      var filename = match[3];
      return url.replace(url_re, '@LANGURL@/' + new_version + '/' + filename);
    }
  }

  function on_switch() {
    const selected = this.options[this.selectedIndex].value;
    const url = window.location.href;
    const new_url = patch_url(url, selected);

    if (new_url != url) {
      // check beforehand if url exists, else redirect to version's start page
      fetch(new_url)
        .then((response) => {
          if (response.ok) {
            window.location.href = new_url;
          } else {
            throw new Error(`${response.status} ${response.statusText}`);
          }
        })
        .catch((error) => {
          let match = url_re.exec(window.location.href);
          if (match) {
            const filename = match[3];
            window.location.href = '@LANGURL_HREF@/' + selected + '/index.html';
          }
        });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    let match = url_re.exec(window.location.href);
    if (match) {
      const release = DOCUMENTATION_OPTIONS.VERSION;
      const version = match[1];
      const select = build_select(version, release);
      document.querySelectorAll('.version_switch').forEach((placeholder) => {
        placeholder.innerHTML = select;
        let selectElement = placeholder.querySelector('select');
        selectElement.addEventListener('change', on_switch);
      });
      document.querySelectorAll('.version_switch_note').forEach((placeholder) => {
        placeholder.innerHTML = 'Or, select a version from the drop-down menu above.';
      });
    }
  });
})();
